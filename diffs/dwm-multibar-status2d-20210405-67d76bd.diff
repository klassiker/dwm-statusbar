---
 config.def.h |   5 +-
 dwm.c        | 272 +++++++++++++++++++++++++++++++++++++++++++++++----
 2 files changed, 255 insertions(+), 22 deletions(-)

diff --git a/config.def.h b/config.def.h
index 1c0b587..0ca97b6 100644
--- a/config.def.h
+++ b/config.def.h
@@ -5,6 +5,7 @@ static const unsigned int borderpx  = 1;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
+static const int extrabars          = 1;        /* initial additional bars, maximum NUM_BARS in dwm.c */
 static const char *fonts[]          = { "monospace:size=10" };
 static const char dmenufont[]       = "monospace:size=10";
 static const char col_gray1[]       = "#222222";
@@ -17,6 +18,7 @@ static const char *colors[][3]      = {
 	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
 	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
 };
+static const char statusseparator   = ';';
 
 /* tagging */
 static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
@@ -70,6 +72,8 @@ static Key keys[] = {
 	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
 	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
 	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
+	{ MODKEY|ShiftMask,             XK_m,      setextracount,  {.i = +1} },
+	{ MODKEY|ShiftMask,             XK_l,      setextracount,  {.i = -1} },
 	{ MODKEY,                       XK_Return, zoom,           {0} },
 	{ MODKEY,                       XK_Tab,    view,           {0} },
 	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
@@ -112,4 +116,3 @@ static Button buttons[] = {
 	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
 	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
 };
-
diff --git a/dwm.c b/dwm.c
index b0b3466..6b4cd8b 100644
--- a/dwm.c
+++ b/dwm.c
@@ -57,6 +57,10 @@
 #define TAGMASK                 ((1 << LENGTH(tags)) - 1)
 #define TEXTW(X)                (drw_fontset_getwidth(drw, (X)) + lrpad)
 
+/* extrabars configuration */
+#define STATUS_CHARS 1024
+#define NUM_BARS 3
+
 /* enums */
 enum { CurNormal, CurResize, CurMove, CurLast }; /* cursor */
 enum { SchemeNorm, SchemeSel }; /* color schemes */
@@ -117,6 +121,8 @@ struct Monitor {
 	int nmaster;
 	int num;
 	int by;               /* bar geometry */
+	int eby[NUM_BARS];    /* extra bars geometry */
+	int ebc;              /* extra bars count */
 	int mx, my, mw, mh;   /* screen size */
 	int wx, wy, ww, wh;   /* window area  */
 	unsigned int seltags;
@@ -129,6 +135,7 @@ struct Monitor {
 	Client *stack;
 	Monitor *next;
 	Window barwin;
+	Window extrabarwins[NUM_BARS];
 	const Layout *lt[2];
 };
 
@@ -163,6 +170,7 @@ static void detachstack(Client *c);
 static Monitor *dirtomon(int dir);
 static void drawbar(Monitor *m);
 static void drawbars(void);
+static int drawstatusbar(Monitor *m, int bh, int extra, char* text);
 static void enternotify(XEvent *e);
 static void expose(XEvent *e);
 static void focus(Client *c);
@@ -198,6 +206,7 @@ static void scan(void);
 static int sendevent(Client *c, Atom proto);
 static void sendmon(Client *c, Monitor *m);
 static void setclientstate(Client *c, long state);
+static void setextracount(const Arg *arg);
 static void setfocus(Client *c);
 static void setfullscreen(Client *c, int fullscreen);
 static void setlayout(const Arg *arg);
@@ -207,6 +216,7 @@ static void seturgent(Client *c, int urg);
 static void showhide(Client *c);
 static void sigchld(int unused);
 static void spawn(const Arg *arg);
+static int statustextwidth(char *text);
 static void tag(const Arg *arg);
 static void tagmon(const Arg *arg);
 static void tile(Monitor *);
@@ -237,7 +247,8 @@ static void zoom(const Arg *arg);
 
 /* variables */
 static const char broken[] = "broken";
-static char stext[256];
+static char stext[STATUS_CHARS];
+static char estext[NUM_BARS][STATUS_CHARS];
 static int screen;
 static int sw, sh;           /* X display screen geometry width, height */
 static int bh, blw = 0;      /* bar geometry */
@@ -440,7 +451,7 @@ buttonpress(XEvent *e)
 			arg.ui = 1 << i;
 		} else if (ev->x < x + blw)
 			click = ClkLtSymbol;
-		else if (ev->x > selmon->ww - (int)TEXTW(stext))
+		else if (ev->x > selmon->ww - statustextwidth(stext))
 			click = ClkStatusText;
 		else
 			click = ClkWinTitle;
@@ -485,7 +496,7 @@ cleanup(void)
 		cleanupmon(mons);
 	for (i = 0; i < CurLast; i++)
 		drw_cur_free(drw, cursor[i]);
-	for (i = 0; i < LENGTH(colors); i++)
+	for (i = 0; i < LENGTH(colors) + 1; i++)
 		free(scheme[i]);
 	XDestroyWindow(dpy, wmcheckwin);
 	drw_free(drw);
@@ -507,6 +518,10 @@ cleanupmon(Monitor *mon)
 	}
 	XUnmapWindow(dpy, mon->barwin);
 	XDestroyWindow(dpy, mon->barwin);
+	for (int i = 0; i < NUM_BARS; i++) {
+		XUnmapWindow(dpy, mon->extrabarwins[i]);
+		XDestroyWindow(dpy, mon->extrabarwins[i]);
+	}
 	free(mon);
 }
 
@@ -568,7 +583,10 @@ configurenotify(XEvent *e)
 				for (c = m->clients; c; c = c->next)
 					if (c->isfullscreen)
 						resizeclient(c, m->mx, m->my, m->mw, m->mh);
+
 				XMoveResizeWindow(dpy, m->barwin, m->wx, m->by, m->ww, bh);
+				for (int i = 0; i < NUM_BARS; i++)
+					XMoveResizeWindow(dpy, m->extrabarwins[i], m->wx, m->eby[i], m->ww, bh);
 			}
 			focus(NULL);
 			arrange(NULL);
@@ -636,6 +654,7 @@ createmon(void)
 	m = ecalloc(1, sizeof(Monitor));
 	m->tagset[0] = m->tagset[1] = 1;
 	m->mfact = mfact;
+	m->ebc = extrabars;
 	m->nmaster = nmaster;
 	m->showbar = showbar;
 	m->topbar = topbar;
@@ -693,6 +712,98 @@ dirtomon(int dir)
 	return m;
 }
 
+int
+drawstatusbar(Monitor *m, int bh, int extra, char* status)
+{
+	int ret, i, w, x, len;
+	char *text;
+	char *p;
+
+	len = strlen(status) + 1;
+	if (!(text = (char*) malloc(sizeof(char)*len)))
+		die("malloc");
+	p = text;
+	memcpy(text, status, len);
+
+	if (extra) {
+		w = m->ww;
+		ret = x = 1;
+	} else {
+		/* 1px padding on both sides */
+		w = statustextwidth(status) - lrpad + 2;
+		ret = x = m->ww - w;
+	}
+
+	drw_setscheme(drw, scheme[LENGTH(colors)]);
+	drw->scheme[ColFg] = scheme[SchemeNorm][ColFg];
+	drw->scheme[ColBg] = scheme[SchemeNorm][ColBg];
+	drw_rect(drw, x, 0, w, bh, 1, 1);
+	x++;
+
+	/* process status text */
+	i = -1;
+	while (text[++i]) {
+		if (text[i] == '^') {
+			text[i] = '\0';
+
+			w = TEXTW(text) - lrpad;
+			drw_text(drw, x, 0, w, bh, 0, text, 0);
+
+			x += w;
+
+			/* process code */
+			while (text[++i] && text[i] != '^') {
+				if ((text[i] == 'c' || text[i] == 'b') && text[i+1] == '#') {
+					char buf[7];
+					memcpy(buf, (char*)text+i+2, 6);
+					buf[6] = '\0';
+
+					char hex[8];
+					char* end;
+					sprintf(hex, "#%06x", (unsigned int)strtol(buf, &end, 16));
+					hex[7] = '\0';
+
+					if (text[i] == 'c')
+						drw_clr_create(drw, &drw->scheme[ColFg], hex);
+					else
+						drw_clr_create(drw, &drw->scheme[ColBg], hex);
+
+					i += end - buf + 1;
+				} else if (text[i] == 'd') {
+					drw->scheme[ColFg] = scheme[SchemeNorm][ColFg];
+					drw->scheme[ColBg] = scheme[SchemeNorm][ColBg];
+				} else if (text[i] == 'r') {
+					int rx = atoi(text + ++i);
+					while (text[++i] != ',');
+					int ry = atoi(text + ++i);
+					while (text[++i] != ',');
+					int rw = atoi(text + ++i);
+					while (text[++i] != ',');
+					int rh = atoi(text + ++i);
+
+					drw_rect(drw, rx + x, ry, rw, rh, 1, 0);
+				} else if (text[i] == 'f') {
+					x += atoi(text + ++i);
+				}
+			}
+
+			if (!text[i])
+				break;
+
+			text = text + i + 1;
+			i=-1;
+		}
+	}
+
+	w = TEXTW(text) - lrpad;
+	drw_text(drw, x, 0, w, bh, 0, text, 0);
+
+	drw_setscheme(drw, scheme[SchemeNorm]);
+	free(p);
+
+	return ret;
+}
+
 void
 drawbar(Monitor *m)
 {
@@ -703,11 +814,7 @@ drawbar(Monitor *m)
 	Client *c;
 
 	/* draw status first so it can be overdrawn by tags later */
-	if (m == selmon) { /* status is only drawn on selected monitor */
-		drw_setscheme(drw, scheme[SchemeNorm]);
-		tw = TEXTW(stext) - lrpad + 2; /* 2px right padding */
-		drw_text(drw, m->ww - tw, 0, tw, bh, 0, stext, 0);
-	}
+	tw = m->ww - drawstatusbar(m, bh, 0, stext);
 
 	for (c = m->clients; c; c = c->next) {
 		occ |= c->tags;
@@ -741,6 +848,11 @@ drawbar(Monitor *m)
 		}
 	}
 	drw_map(drw, m->barwin, 0, 0, m->ww, bh);
+
+	for (int i = 0; i < NUM_BARS; i++) {
+		drawstatusbar(m, bh, 1, estext[i]);
+		drw_map(drw, m->extrabarwins[i], 0, 0, m->ww, bh);
+	}
 }
 
 void
@@ -1458,6 +1570,23 @@ sendevent(Client *c, Atom proto)
 	return exists;
 }
 
+void
+setextracount(const Arg *arg)
+{
+	int count;
+
+	if (!arg || !selmon)
+		return;
+
+	count = selmon->ebc + arg->i;
+
+	if (count < 0 || count > NUM_BARS)
+		return;
+
+	selmon->ebc = count;
+	updatebarpos(selmon);
+}
+
 void
 setfocus(Client *c)
 {
@@ -1568,7 +1697,8 @@ setup(void)
 	cursor[CurResize] = drw_cur_create(drw, XC_sizing);
 	cursor[CurMove] = drw_cur_create(drw, XC_fleur);
 	/* init appearance */
-	scheme = ecalloc(LENGTH(colors), sizeof(Clr *));
+	scheme = ecalloc(LENGTH(colors) + 1, sizeof(Clr *));
+	scheme[LENGTH(colors)] = drw_scm_create(drw, colors[0], 3);
 	for (i = 0; i < LENGTH(colors); i++)
 		scheme[i] = drw_scm_create(drw, colors[i], 3);
 	/* init bars */
@@ -1597,7 +1727,6 @@ setup(void)
 	focus(NULL);
 }
 
-
 void
 seturgent(Client *c, int urg)
 {
@@ -1653,6 +1782,42 @@ spawn(const Arg *arg)
 	}
 }
 
+int
+statustextwidth(char *text)
+{
+	int i, w;
+	short isCode = 0;
+
+	w = 0;
+	i = -1;
+	while (text[++i]) {
+		if (text[i] == '^') {
+			if (isCode) {
+				isCode = 0;
+
+				text = text + i + 1;
+				i = -1;
+			} else {
+				isCode = 1;
+
+				text[i] = '\0';
+				w += TEXTW(text) - lrpad;
+				text[i] = '^';
+
+				if (text[++i] == 'f')
+					w += atoi(text + ++i);
+			}
+		}
+	}
+
+	if (isCode)
+		w += TEXTW(text + i + 1);
+	else
+		w += TEXTW(text);
+
+	return w;
+}
+
 void
 tag(const Arg *arg)
 {
@@ -1812,14 +1977,24 @@ updatebars(void)
 	};
 	XClassHint ch = {"dwm", "dwm"};
 	for (m = mons; m; m = m->next) {
-		if (m->barwin)
-			continue;
-		m->barwin = XCreateWindow(dpy, root, m->wx, m->by, m->ww, bh, 0, DefaultDepth(dpy, screen),
-				CopyFromParent, DefaultVisual(dpy, screen),
-				CWOverrideRedirect|CWBackPixmap|CWEventMask, &wa);
-		XDefineCursor(dpy, m->barwin, cursor[CurNormal]->cursor);
-		XMapRaised(dpy, m->barwin);
-		XSetClassHint(dpy, m->barwin, &ch);
+		if (!m->barwin) {
+			m->barwin = XCreateWindow(dpy, root, m->wx, m->by, m->ww, bh, 0, DefaultDepth(dpy, screen),
+					CopyFromParent, DefaultVisual(dpy, screen),
+					CWOverrideRedirect|CWBackPixmap|CWEventMask, &wa);
+			XDefineCursor(dpy, m->barwin, cursor[CurNormal]->cursor);
+			XMapRaised(dpy, m->barwin);
+			XSetClassHint(dpy, m->barwin, &ch);
+		}
+		for (int i = 0; i < NUM_BARS; i++) {
+			if (!m->extrabarwins[i]) {
+				m->extrabarwins[i] = XCreateWindow(dpy, root, m->wx, m->eby[i], m->ww, bh, 0, DefaultDepth(dpy, screen),
+						CopyFromParent, DefaultVisual(dpy, screen),
+						CWOverrideRedirect|CWBackPixmap|CWEventMask, &wa);
+				XDefineCursor(dpy, m->extrabarwins[i], cursor[CurNormal]->cursor);
+				XMapRaised(dpy, m->extrabarwins[i]);
+				XSetClassHint(dpy, m->extrabarwins[i], &ch);
+			}
+		}
 	}
 }
 
@@ -1834,6 +2009,23 @@ updatebarpos(Monitor *m)
 		m->wy = m->topbar ? m->wy + bh : m->wy;
 	} else
 		m->by = -bh;
+
+	for (int i = 0; i < NUM_BARS; i++) {
+		int before = m->eby[i];
+
+		/* display only if extrabarcount is higher and text is set */
+		if (i < m->ebc && estext[i][0]) {
+			m->wh -= bh;
+			m->eby[i] = m->topbar ? m->wy + m->wh : m->wy;
+			m->wy = m->topbar ? m->wy : m->wy + bh;
+		} else
+			m->eby[i] = -bh;
+
+		if (m->eby[i] != before && m->extrabarwins[i]) {
+			XMoveResizeWindow(dpy, m->extrabarwins[i], m->wx, m->eby[i], m->ww, bh);
+			arrangemon(m);
+		}
+	}
 }
 
 void
@@ -1990,9 +2182,42 @@ updatesizehints(Client *c)
 void
 updatestatus(void)
 {
-	if (!gettextprop(root, XA_WM_NAME, stext, sizeof(stext)))
+	char text[STATUS_CHARS + NUM_BARS * STATUS_CHARS];
+
+	if (!gettextprop(root, XA_WM_NAME, text, sizeof(text))) {
 		strcpy(stext, "dwm-"VERSION);
-	drawbar(selmon);
+		for (int i = 0; i < NUM_BARS; i++)
+			estext[i][0] = '\0';
+	} else {
+		char *curr = strchr(text, statusseparator);
+
+		if (curr) {
+			*curr = '\0'; curr++;
+		}
+
+		strncpy(stext, text, sizeof(stext) - 1);
+
+		for (int i = 0; i < NUM_BARS; i++) {
+			if (curr) {
+				char *next = strchr(curr, statusseparator);
+
+				/* only use nullbyte if there are more bars to display text */
+				if (next && i + 1 < NUM_BARS) {
+					*next = '\0'; next++;
+				}
+
+				strncpy(estext[i], curr, sizeof(estext[i]) - 1);
+
+				curr = next;
+			} else
+				estext[i][0] = '\0';
+		}
+	}
+
+	for (Monitor *m = mons; m; m = m->next) {
+		updatebarpos(m);
+		drawbar(m);
+	}
 }
 
 void
@@ -2069,9 +2294,14 @@ wintomon(Window w)
 
 	if (w == root && getrootptr(&x, &y))
 		return recttomon(x, y, 1, 1);
-	for (m = mons; m; m = m->next)
+	for (m = mons; m; m = m->next) {
 		if (w == m->barwin)
 			return m;
+
+		for (int i = 0; i < NUM_BARS; i++)
+			if (w == m->extrabarwins[i])
+				return m;
+	}
 	if ((c = wintoclient(w)))
 		return c->mon;
 	return selmon;
-- 
2.31.1

